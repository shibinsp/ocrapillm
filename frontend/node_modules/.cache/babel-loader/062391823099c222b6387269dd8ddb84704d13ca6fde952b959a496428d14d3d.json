{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8001';\n\n// Create axios instance with default config\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  // 30 seconds timeout\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Retry configuration\nconst MAX_RETRIES = 3;\nconst RETRY_DELAY = 1000; // 1 second\n\n// Helper function for retry logic\nconst retryRequest = async (requestFn, retries = MAX_RETRIES) => {\n  try {\n    return await requestFn();\n  } catch (error) {\n    if (retries > 0 && (error.code === 'ECONNABORTED' || error.message.includes('ERR_ABORTED') || !error.response)) {\n      console.log(`Retrying request... ${MAX_RETRIES - retries + 1}/${MAX_RETRIES}`);\n      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\n      return retryRequest(requestFn, retries - 1);\n    }\n    throw error;\n  }\n};\n\n// Request interceptor\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor\napi.interceptors.response.use(response => {\n  console.log(`API Response: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$response3;\n  console.error('API Response Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n\n  // Handle common errors\n  if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n    throw new Error('Resource not found');\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 500) {\n    throw new Error('Server error occurred');\n  } else if (error.code === 'ECONNABORTED') {\n    throw new Error('Request timeout - please try again');\n  } else if (!error.response) {\n    throw new Error('Network error - please check your connection');\n  }\n  return Promise.reject(error);\n});\n\n// API endpoints\nexport const apiService = {\n  // Document upload and processing\n  uploadDocument: async (file, onProgress) => {\n    return await retryRequest(async () => {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await api.post('/upload/', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        },\n        timeout: 120000,\n        // 2 minutes for file uploads\n        onUploadProgress: progressEvent => {\n          if (onProgress && progressEvent.total) {\n            const progress = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n            onProgress(progress);\n          }\n        }\n      });\n      return response.data;\n    });\n  },\n  // Get task processing status\n  getTaskStatus: async taskId => {\n    return await retryRequest(async () => {\n      const response = await api.get(`/task-status/${taskId}`);\n      return response.data;\n    });\n  },\n  // Poll task status until completion\n  pollTaskStatus: async (taskId, onProgress) => {\n    const pollInterval = 2000; // 2 seconds\n    const maxAttempts = 150; // 5 minutes max (150 * 2s)\n    let attempts = 0;\n    return new Promise((resolve, reject) => {\n      const poll = async () => {\n        try {\n          attempts++;\n          const status = await apiService.getTaskStatus(taskId);\n          if (onProgress) {\n            onProgress(status);\n          }\n          if (status.status === 'completed') {\n            resolve(status.result);\n          } else if (status.status === 'failed') {\n            reject(new Error(status.error || 'Task failed'));\n          } else if (attempts >= maxAttempts) {\n            reject(new Error('Task timeout - processing took too long'));\n          } else {\n            // Continue polling\n            setTimeout(poll, pollInterval);\n          }\n        } catch (error) {\n          reject(error);\n        }\n      };\n      poll();\n    });\n  },\n  // Get processed document content\n  getDocumentContent: async documentId => {\n    const response = await api.get(`/documents/${documentId}/content`);\n    return response.data;\n  },\n  // Validate/update document text\n  validateDocument: async (documentId, text) => {\n    const response = await api.post(`/validate/${documentId}`, {\n      validated_text: text\n    });\n    return response.data;\n  },\n  // Get all documents\n  getDocuments: async () => {\n    try {\n      return await retryRequest(async () => {\n        const response = await api.get('/documents/');\n        return response.data;\n      });\n    } catch (error) {\n      console.warn('Failed to fetch documents from backend, using fallback data:', error.message);\n      // Return fallback data when backend is not available\n      return [{\n        id: 'fallback-doc-1',\n        name: 'Sample Document.pdf',\n        filename: 'sample.pdf',\n        size: 1024000,\n        status: 'completed',\n        pages: 3,\n        created_at: new Date().toISOString()\n      }];\n    }\n  },\n  // Delete document\n  deleteDocument: async documentId => {\n    const response = await api.delete(`/documents/${documentId}`);\n    return response.data;\n  },\n  // Chat with AI about document\n  chatWithDocument: async (documentId, message, chatHistory = []) => {\n    const response = await api.post(`/chat/${documentId}`, {\n      message,\n      chat_history: chatHistory\n    });\n    return response.data;\n  },\n  // Get chat history for document\n  getChatHistory: async documentId => {\n    const response = await api.get(`/documents/${documentId}/chat`);\n    return response.data;\n  },\n  // Chat with AI about all documents\n  chatWithAllDocuments: async (message, chatHistory = []) => {\n    const response = await api.post('/chat/all', {\n      message,\n      chat_history: chatHistory\n    });\n    return response.data;\n  },\n  // Get document pages with images for validation\n  getDocumentPages: async documentId => {\n    const response = await api.get(`/documents/${documentId}/pages`);\n    return response.data;\n  },\n  // Validate a specific page\n  validatePage: async (documentId, pageId, validatedText) => {\n    const response = await api.post(`/documents/${documentId}/pages/${pageId}/validate`, {\n      validated_text: validatedText\n    });\n    return response.data;\n  },\n  // Export document\n  exportDocument: async (documentId, format = 'txt') => {\n    const response = await api.get(`/documents/${documentId}/export`, {\n      params: {\n        format\n      },\n      responseType: 'blob'\n    });\n    return response.data;\n  },\n  // Search within document\n  searchDocument: async (documentId, query) => {\n    const response = await api.post(`/documents/${documentId}/search`, {\n      query\n    });\n    return response.data;\n  },\n  // Health check\n  healthCheck: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\n\n// Utility functions\nexport const downloadFile = (blob, filename) => {\n  const url = window.URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  window.URL.revokeObjectURL(url);\n};\nexport const formatFileSize = bytes => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\nexport const validateFile = file => {\n  const maxSize = 50 * 1024 * 1024; // 50MB\n  const allowedTypes = ['application/pdf'];\n  if (!allowedTypes.includes(file.type)) {\n    throw new Error('Only PDF files are allowed');\n  }\n  if (file.size > maxSize) {\n    throw new Error('File size must be less than 50MB');\n  }\n  return true;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","timeout","headers","MAX_RETRIES","RETRY_DELAY","retryRequest","requestFn","retries","error","code","message","includes","response","console","log","Promise","resolve","setTimeout","interceptors","request","use","config","_config$method","method","toUpperCase","url","reject","status","_error$response","_error$response2","_error$response3","data","Error","apiService","uploadDocument","file","onProgress","formData","FormData","append","post","onUploadProgress","progressEvent","total","progress","Math","round","loaded","getTaskStatus","taskId","get","pollTaskStatus","pollInterval","maxAttempts","attempts","poll","result","getDocumentContent","documentId","validateDocument","text","validated_text","getDocuments","warn","id","name","filename","size","pages","created_at","Date","toISOString","deleteDocument","delete","chatWithDocument","chatHistory","chat_history","getChatHistory","chatWithAllDocuments","getDocumentPages","validatePage","pageId","validatedText","exportDocument","format","params","responseType","searchDocument","query","healthCheck","downloadFile","blob","window","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","formatFileSize","bytes","k","sizes","i","floor","parseFloat","pow","toFixed","validateFile","maxSize","allowedTypes","type"],"sources":["D:/trae/ocrapillm/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8001';\r\n\r\n// Create axios instance with default config\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000, // 30 seconds timeout\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Retry configuration\r\nconst MAX_RETRIES = 3;\r\nconst RETRY_DELAY = 1000; // 1 second\r\n\r\n// Helper function for retry logic\r\nconst retryRequest = async (requestFn, retries = MAX_RETRIES) => {\r\n  try {\r\n    return await requestFn();\r\n  } catch (error) {\r\n    if (retries > 0 && (error.code === 'ECONNABORTED' || error.message.includes('ERR_ABORTED') || !error.response)) {\r\n      console.log(`Retrying request... ${MAX_RETRIES - retries + 1}/${MAX_RETRIES}`);\r\n      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));\r\n      return retryRequest(requestFn, retries - 1);\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Request interceptor\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`API Request: ${config.method?.toUpperCase()} ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`API Response: ${response.status} ${response.config.url}`);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Response Error:', error.response?.data || error.message);\r\n    \r\n    // Handle common errors\r\n    if (error.response?.status === 404) {\r\n      throw new Error('Resource not found');\r\n    } else if (error.response?.status === 500) {\r\n      throw new Error('Server error occurred');\r\n    } else if (error.code === 'ECONNABORTED') {\r\n      throw new Error('Request timeout - please try again');\r\n    } else if (!error.response) {\r\n      throw new Error('Network error - please check your connection');\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API endpoints\r\nexport const apiService = {\r\n  // Document upload and processing\r\n  uploadDocument: async (file, onProgress) => {\r\n    return await retryRequest(async () => {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      \r\n      const response = await api.post('/upload/', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n        timeout: 120000, // 2 minutes for file uploads\r\n        onUploadProgress: (progressEvent) => {\r\n          if (onProgress && progressEvent.total) {\r\n            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n            onProgress(progress);\r\n          }\r\n        },\r\n      });\r\n      \r\n      return response.data;\r\n    });\r\n  },\r\n  \r\n  // Get task processing status\r\n  getTaskStatus: async (taskId) => {\r\n    return await retryRequest(async () => {\r\n      const response = await api.get(`/task-status/${taskId}`);\r\n      return response.data;\r\n    });\r\n  },\r\n\r\n  // Poll task status until completion\r\n  pollTaskStatus: async (taskId, onProgress) => {\r\n    const pollInterval = 2000; // 2 seconds\r\n    const maxAttempts = 150; // 5 minutes max (150 * 2s)\r\n    let attempts = 0;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const poll = async () => {\r\n        try {\r\n          attempts++;\r\n          const status = await apiService.getTaskStatus(taskId);\r\n          \r\n          if (onProgress) {\r\n            onProgress(status);\r\n          }\r\n\r\n          if (status.status === 'completed') {\r\n            resolve(status.result);\r\n          } else if (status.status === 'failed') {\r\n            reject(new Error(status.error || 'Task failed'));\r\n          } else if (attempts >= maxAttempts) {\r\n            reject(new Error('Task timeout - processing took too long'));\r\n          } else {\r\n            // Continue polling\r\n            setTimeout(poll, pollInterval);\r\n          }\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      };\r\n      \r\n      poll();\r\n    });\r\n  },\r\n  \r\n  // Get processed document content\r\n  getDocumentContent: async (documentId) => {\r\n    const response = await api.get(`/documents/${documentId}/content`);\r\n    return response.data;\r\n  },\r\n  \r\n  // Validate/update document text\r\n  validateDocument: async (documentId, text) => {\r\n    const response = await api.post(`/validate/${documentId}`, {\r\n      validated_text: text,\r\n    });\r\n    return response.data;\r\n  },\r\n  \r\n  // Get all documents\r\n  getDocuments: async () => {\r\n    try {\r\n      return await retryRequest(async () => {\r\n        const response = await api.get('/documents/');\r\n        return response.data;\r\n      });\r\n    } catch (error) {\r\n      console.warn('Failed to fetch documents from backend, using fallback data:', error.message);\r\n      // Return fallback data when backend is not available\r\n      return [\r\n        {\r\n          id: 'fallback-doc-1',\r\n          name: 'Sample Document.pdf',\r\n          filename: 'sample.pdf',\r\n          size: 1024000,\r\n          status: 'completed',\r\n          pages: 3,\r\n          created_at: new Date().toISOString()\r\n        }\r\n      ];\r\n    }\r\n  },\r\n  \r\n  // Delete document\r\n  deleteDocument: async (documentId) => {\r\n    const response = await api.delete(`/documents/${documentId}`);\r\n    return response.data;\r\n  },\r\n  \r\n  // Chat with AI about document\r\n  chatWithDocument: async (documentId, message, chatHistory = []) => {\r\n    const response = await api.post(`/chat/${documentId}`, {\r\n      message,\r\n      chat_history: chatHistory,\r\n    });\r\n    return response.data;\r\n  },\r\n  \r\n  // Get chat history for document\r\n  getChatHistory: async (documentId) => {\r\n    const response = await api.get(`/documents/${documentId}/chat`);\r\n    return response.data;\r\n  },\r\n\r\n  // Chat with AI about all documents\r\n  chatWithAllDocuments: async (message, chatHistory = []) => {\r\n    const response = await api.post('/chat/all', {\r\n      message,\r\n      chat_history: chatHistory,\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Get document pages with images for validation\r\n  getDocumentPages: async (documentId) => {\r\n    const response = await api.get(`/documents/${documentId}/pages`);\r\n    return response.data;\r\n  },\r\n\r\n  // Validate a specific page\r\n  validatePage: async (documentId, pageId, validatedText) => {\r\n    const response = await api.post(`/documents/${documentId}/pages/${pageId}/validate`, {\r\n      validated_text: validatedText\r\n    });\r\n    return response.data;\r\n  },\r\n  \r\n  // Export document\r\n  exportDocument: async (documentId, format = 'txt') => {\r\n    const response = await api.get(`/documents/${documentId}/export`, {\r\n      params: { format },\r\n      responseType: 'blob',\r\n    });\r\n    return response.data;\r\n  },\r\n  \r\n  // Search within document\r\n  searchDocument: async (documentId, query) => {\r\n    const response = await api.post(`/documents/${documentId}/search`, {\r\n      query,\r\n    });\r\n    return response.data;\r\n  },\r\n  \r\n  // Health check\r\n  healthCheck: async () => {\r\n    const response = await api.get('/health');\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Utility functions\r\nexport const downloadFile = (blob, filename) => {\r\n  const url = window.URL.createObjectURL(blob);\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.download = filename;\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  window.URL.revokeObjectURL(url);\r\n};\r\n\r\nexport const formatFileSize = (bytes) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n};\r\n\r\nexport const validateFile = (file) => {\r\n  const maxSize = 50 * 1024 * 1024; // 50MB\r\n  const allowedTypes = ['application/pdf'];\r\n  \r\n  if (!allowedTypes.includes(file.type)) {\r\n    throw new Error('Only PDF files are allowed');\r\n  }\r\n  \r\n  if (file.size > maxSize) {\r\n    throw new Error('File size must be less than 50MB');\r\n  }\r\n  \r\n  return true;\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,uBAAuB;;AAE5C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,WAAW,GAAG,CAAC;AACrB,MAAMC,WAAW,GAAG,IAAI,CAAC,CAAC;;AAE1B;AACA,MAAMC,YAAY,GAAG,MAAAA,CAAOC,SAAS,EAAEC,OAAO,GAAGJ,WAAW,KAAK;EAC/D,IAAI;IACF,OAAO,MAAMG,SAAS,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,IAAID,OAAO,GAAG,CAAC,KAAKC,KAAK,CAACC,IAAI,KAAK,cAAc,IAAID,KAAK,CAACE,OAAO,CAACC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAACH,KAAK,CAACI,QAAQ,CAAC,EAAE;MAC9GC,OAAO,CAACC,GAAG,CAAC,uBAAuBX,WAAW,GAAGI,OAAO,GAAG,CAAC,IAAIJ,WAAW,EAAE,CAAC;MAC9E,MAAM,IAAIY,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEZ,WAAW,CAAC,CAAC;MAC9D,OAAOC,YAAY,CAACC,SAAS,EAAEC,OAAO,GAAG,CAAC,CAAC;IAC7C;IACA,MAAMC,KAAK;EACb;AACF,CAAC;;AAED;AACAV,GAAG,CAACoB,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EAAA,IAAAC,cAAA;EACVT,OAAO,CAACC,GAAG,CAAC,iBAAAQ,cAAA,GAAgBD,MAAM,CAACE,MAAM,cAAAD,cAAA,uBAAbA,cAAA,CAAeE,WAAW,CAAC,CAAC,IAAIH,MAAM,CAACI,GAAG,EAAE,CAAC;EACzE,OAAOJ,MAAM;AACf,CAAC,EACAb,KAAK,IAAK;EACTK,OAAO,CAACL,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAC1C,OAAOO,OAAO,CAACW,MAAM,CAAClB,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAV,GAAG,CAACoB,YAAY,CAACN,QAAQ,CAACQ,GAAG,CAC1BR,QAAQ,IAAK;EACZC,OAAO,CAACC,GAAG,CAAC,iBAAiBF,QAAQ,CAACe,MAAM,IAAIf,QAAQ,CAACS,MAAM,CAACI,GAAG,EAAE,CAAC;EACtE,OAAOb,QAAQ;AACjB,CAAC,EACAJ,KAAK,IAAK;EAAA,IAAAoB,eAAA,EAAAC,gBAAA,EAAAC,gBAAA;EACTjB,OAAO,CAACL,KAAK,CAAC,qBAAqB,EAAE,EAAAoB,eAAA,GAAApB,KAAK,CAACI,QAAQ,cAAAgB,eAAA,uBAAdA,eAAA,CAAgBG,IAAI,KAAIvB,KAAK,CAACE,OAAO,CAAC;;EAE3E;EACA,IAAI,EAAAmB,gBAAA,GAAArB,KAAK,CAACI,QAAQ,cAAAiB,gBAAA,uBAAdA,gBAAA,CAAgBF,MAAM,MAAK,GAAG,EAAE;IAClC,MAAM,IAAIK,KAAK,CAAC,oBAAoB,CAAC;EACvC,CAAC,MAAM,IAAI,EAAAF,gBAAA,GAAAtB,KAAK,CAACI,QAAQ,cAAAkB,gBAAA,uBAAdA,gBAAA,CAAgBH,MAAM,MAAK,GAAG,EAAE;IACzC,MAAM,IAAIK,KAAK,CAAC,uBAAuB,CAAC;EAC1C,CAAC,MAAM,IAAIxB,KAAK,CAACC,IAAI,KAAK,cAAc,EAAE;IACxC,MAAM,IAAIuB,KAAK,CAAC,oCAAoC,CAAC;EACvD,CAAC,MAAM,IAAI,CAACxB,KAAK,CAACI,QAAQ,EAAE;IAC1B,MAAM,IAAIoB,KAAK,CAAC,8CAA8C,CAAC;EACjE;EAEA,OAAOjB,OAAO,CAACW,MAAM,CAAClB,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMyB,UAAU,GAAG;EACxB;EACAC,cAAc,EAAE,MAAAA,CAAOC,IAAI,EAAEC,UAAU,KAAK;IAC1C,OAAO,MAAM/B,YAAY,CAAC,YAAY;MACpC,MAAMgC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,IAAI,CAAC;MAE7B,MAAMvB,QAAQ,GAAG,MAAMd,GAAG,CAAC0C,IAAI,CAAC,UAAU,EAAEH,QAAQ,EAAE;QACpDnC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDD,OAAO,EAAE,MAAM;QAAE;QACjBwC,gBAAgB,EAAGC,aAAa,IAAK;UACnC,IAAIN,UAAU,IAAIM,aAAa,CAACC,KAAK,EAAE;YACrC,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAAEJ,aAAa,CAACK,MAAM,GAAG,GAAG,GAAIL,aAAa,CAACC,KAAK,CAAC;YAC/EP,UAAU,CAACQ,QAAQ,CAAC;UACtB;QACF;MACF,CAAC,CAAC;MAEF,OAAOhC,QAAQ,CAACmB,IAAI;IACtB,CAAC,CAAC;EACJ,CAAC;EAED;EACAiB,aAAa,EAAE,MAAOC,MAAM,IAAK;IAC/B,OAAO,MAAM5C,YAAY,CAAC,YAAY;MACpC,MAAMO,QAAQ,GAAG,MAAMd,GAAG,CAACoD,GAAG,CAAC,gBAAgBD,MAAM,EAAE,CAAC;MACxD,OAAOrC,QAAQ,CAACmB,IAAI;IACtB,CAAC,CAAC;EACJ,CAAC;EAED;EACAoB,cAAc,EAAE,MAAAA,CAAOF,MAAM,EAAEb,UAAU,KAAK;IAC5C,MAAMgB,YAAY,GAAG,IAAI,CAAC,CAAC;IAC3B,MAAMC,WAAW,GAAG,GAAG,CAAC,CAAC;IACzB,IAAIC,QAAQ,GAAG,CAAC;IAEhB,OAAO,IAAIvC,OAAO,CAAC,CAACC,OAAO,EAAEU,MAAM,KAAK;MACtC,MAAM6B,IAAI,GAAG,MAAAA,CAAA,KAAY;QACvB,IAAI;UACFD,QAAQ,EAAE;UACV,MAAM3B,MAAM,GAAG,MAAMM,UAAU,CAACe,aAAa,CAACC,MAAM,CAAC;UAErD,IAAIb,UAAU,EAAE;YACdA,UAAU,CAACT,MAAM,CAAC;UACpB;UAEA,IAAIA,MAAM,CAACA,MAAM,KAAK,WAAW,EAAE;YACjCX,OAAO,CAACW,MAAM,CAAC6B,MAAM,CAAC;UACxB,CAAC,MAAM,IAAI7B,MAAM,CAACA,MAAM,KAAK,QAAQ,EAAE;YACrCD,MAAM,CAAC,IAAIM,KAAK,CAACL,MAAM,CAACnB,KAAK,IAAI,aAAa,CAAC,CAAC;UAClD,CAAC,MAAM,IAAI8C,QAAQ,IAAID,WAAW,EAAE;YAClC3B,MAAM,CAAC,IAAIM,KAAK,CAAC,yCAAyC,CAAC,CAAC;UAC9D,CAAC,MAAM;YACL;YACAf,UAAU,CAACsC,IAAI,EAAEH,YAAY,CAAC;UAChC;QACF,CAAC,CAAC,OAAO5C,KAAK,EAAE;UACdkB,MAAM,CAAClB,KAAK,CAAC;QACf;MACF,CAAC;MAED+C,IAAI,CAAC,CAAC;IACR,CAAC,CAAC;EACJ,CAAC;EAED;EACAE,kBAAkB,EAAE,MAAOC,UAAU,IAAK;IACxC,MAAM9C,QAAQ,GAAG,MAAMd,GAAG,CAACoD,GAAG,CAAC,cAAcQ,UAAU,UAAU,CAAC;IAClE,OAAO9C,QAAQ,CAACmB,IAAI;EACtB,CAAC;EAED;EACA4B,gBAAgB,EAAE,MAAAA,CAAOD,UAAU,EAAEE,IAAI,KAAK;IAC5C,MAAMhD,QAAQ,GAAG,MAAMd,GAAG,CAAC0C,IAAI,CAAC,aAAakB,UAAU,EAAE,EAAE;MACzDG,cAAc,EAAED;IAClB,CAAC,CAAC;IACF,OAAOhD,QAAQ,CAACmB,IAAI;EACtB,CAAC;EAED;EACA+B,YAAY,EAAE,MAAAA,CAAA,KAAY;IACxB,IAAI;MACF,OAAO,MAAMzD,YAAY,CAAC,YAAY;QACpC,MAAMO,QAAQ,GAAG,MAAMd,GAAG,CAACoD,GAAG,CAAC,aAAa,CAAC;QAC7C,OAAOtC,QAAQ,CAACmB,IAAI;MACtB,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOvB,KAAK,EAAE;MACdK,OAAO,CAACkD,IAAI,CAAC,8DAA8D,EAAEvD,KAAK,CAACE,OAAO,CAAC;MAC3F;MACA,OAAO,CACL;QACEsD,EAAE,EAAE,gBAAgB;QACpBC,IAAI,EAAE,qBAAqB;QAC3BC,QAAQ,EAAE,YAAY;QACtBC,IAAI,EAAE,OAAO;QACbxC,MAAM,EAAE,WAAW;QACnByC,KAAK,EAAE,CAAC;QACRC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACrC,CAAC,CACF;IACH;EACF,CAAC;EAED;EACAC,cAAc,EAAE,MAAOd,UAAU,IAAK;IACpC,MAAM9C,QAAQ,GAAG,MAAMd,GAAG,CAAC2E,MAAM,CAAC,cAAcf,UAAU,EAAE,CAAC;IAC7D,OAAO9C,QAAQ,CAACmB,IAAI;EACtB,CAAC;EAED;EACA2C,gBAAgB,EAAE,MAAAA,CAAOhB,UAAU,EAAEhD,OAAO,EAAEiE,WAAW,GAAG,EAAE,KAAK;IACjE,MAAM/D,QAAQ,GAAG,MAAMd,GAAG,CAAC0C,IAAI,CAAC,SAASkB,UAAU,EAAE,EAAE;MACrDhD,OAAO;MACPkE,YAAY,EAAED;IAChB,CAAC,CAAC;IACF,OAAO/D,QAAQ,CAACmB,IAAI;EACtB,CAAC;EAED;EACA8C,cAAc,EAAE,MAAOnB,UAAU,IAAK;IACpC,MAAM9C,QAAQ,GAAG,MAAMd,GAAG,CAACoD,GAAG,CAAC,cAAcQ,UAAU,OAAO,CAAC;IAC/D,OAAO9C,QAAQ,CAACmB,IAAI;EACtB,CAAC;EAED;EACA+C,oBAAoB,EAAE,MAAAA,CAAOpE,OAAO,EAAEiE,WAAW,GAAG,EAAE,KAAK;IACzD,MAAM/D,QAAQ,GAAG,MAAMd,GAAG,CAAC0C,IAAI,CAAC,WAAW,EAAE;MAC3C9B,OAAO;MACPkE,YAAY,EAAED;IAChB,CAAC,CAAC;IACF,OAAO/D,QAAQ,CAACmB,IAAI;EACtB,CAAC;EAED;EACAgD,gBAAgB,EAAE,MAAOrB,UAAU,IAAK;IACtC,MAAM9C,QAAQ,GAAG,MAAMd,GAAG,CAACoD,GAAG,CAAC,cAAcQ,UAAU,QAAQ,CAAC;IAChE,OAAO9C,QAAQ,CAACmB,IAAI;EACtB,CAAC;EAED;EACAiD,YAAY,EAAE,MAAAA,CAAOtB,UAAU,EAAEuB,MAAM,EAAEC,aAAa,KAAK;IACzD,MAAMtE,QAAQ,GAAG,MAAMd,GAAG,CAAC0C,IAAI,CAAC,cAAckB,UAAU,UAAUuB,MAAM,WAAW,EAAE;MACnFpB,cAAc,EAAEqB;IAClB,CAAC,CAAC;IACF,OAAOtE,QAAQ,CAACmB,IAAI;EACtB,CAAC;EAED;EACAoD,cAAc,EAAE,MAAAA,CAAOzB,UAAU,EAAE0B,MAAM,GAAG,KAAK,KAAK;IACpD,MAAMxE,QAAQ,GAAG,MAAMd,GAAG,CAACoD,GAAG,CAAC,cAAcQ,UAAU,SAAS,EAAE;MAChE2B,MAAM,EAAE;QAAED;MAAO,CAAC;MAClBE,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,OAAO1E,QAAQ,CAACmB,IAAI;EACtB,CAAC;EAED;EACAwD,cAAc,EAAE,MAAAA,CAAO7B,UAAU,EAAE8B,KAAK,KAAK;IAC3C,MAAM5E,QAAQ,GAAG,MAAMd,GAAG,CAAC0C,IAAI,CAAC,cAAckB,UAAU,SAAS,EAAE;MACjE8B;IACF,CAAC,CAAC;IACF,OAAO5E,QAAQ,CAACmB,IAAI;EACtB,CAAC;EAED;EACA0D,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAM7E,QAAQ,GAAG,MAAMd,GAAG,CAACoD,GAAG,CAAC,SAAS,CAAC;IACzC,OAAOtC,QAAQ,CAACmB,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAM2D,YAAY,GAAGA,CAACC,IAAI,EAAEzB,QAAQ,KAAK;EAC9C,MAAMzC,GAAG,GAAGmE,MAAM,CAACC,GAAG,CAACC,eAAe,CAACH,IAAI,CAAC;EAC5C,MAAMI,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxCF,IAAI,CAACG,IAAI,GAAGzE,GAAG;EACfsE,IAAI,CAACI,QAAQ,GAAGjC,QAAQ;EACxB8B,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;EAC/BA,IAAI,CAACO,KAAK,CAAC,CAAC;EACZN,QAAQ,CAACI,IAAI,CAACG,WAAW,CAACR,IAAI,CAAC;EAC/BH,MAAM,CAACC,GAAG,CAACW,eAAe,CAAC/E,GAAG,CAAC;AACjC,CAAC;AAED,OAAO,MAAMgF,cAAc,GAAIC,KAAK,IAAK;EACvC,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;EACjC,MAAMC,CAAC,GAAG,IAAI;EACd,MAAMC,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EACzC,MAAMC,CAAC,GAAGhE,IAAI,CAACiE,KAAK,CAACjE,IAAI,CAAC/B,GAAG,CAAC4F,KAAK,CAAC,GAAG7D,IAAI,CAAC/B,GAAG,CAAC6F,CAAC,CAAC,CAAC;EACnD,OAAOI,UAAU,CAAC,CAACL,KAAK,GAAG7D,IAAI,CAACmE,GAAG,CAACL,CAAC,EAAEE,CAAC,CAAC,EAAEI,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGL,KAAK,CAACC,CAAC,CAAC;AACzE,CAAC;AAED,OAAO,MAAMK,YAAY,GAAI/E,IAAI,IAAK;EACpC,MAAMgF,OAAO,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;EAClC,MAAMC,YAAY,GAAG,CAAC,iBAAiB,CAAC;EAExC,IAAI,CAACA,YAAY,CAACzG,QAAQ,CAACwB,IAAI,CAACkF,IAAI,CAAC,EAAE;IACrC,MAAM,IAAIrF,KAAK,CAAC,4BAA4B,CAAC;EAC/C;EAEA,IAAIG,IAAI,CAACgC,IAAI,GAAGgD,OAAO,EAAE;IACvB,MAAM,IAAInF,KAAK,CAAC,kCAAkC,CAAC;EACrD;EAEA,OAAO,IAAI;AACb,CAAC;AAED,eAAelC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}