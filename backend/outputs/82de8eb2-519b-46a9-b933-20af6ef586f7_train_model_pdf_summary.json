{
  "success": true,
  "document_id": "1c87bf31-d468-44d0-862e-afeabe58829a",
  "pdf_file": "uploads\\82de8eb2-519b-46a9-b933-20af6ef586f7_train_model_pdf.pdf",
  "total_pages": 4,
  "successful_pages": 4,
  "failed_pages": 0,
  "total_characters": 2520,
  "total_tokens_used": 316,
  "extracted_text": "Page 1: This is extracted text from page 1.\n        \nThis is a demonstration of the OCR system integrated with PostgreSQL database.\nThe system can process PDF documents, extract text from each page, and store all data in the database.\n        \nKey features:\n- Frontend upload integration\n- Database storage of all content\n- Page-by-page processing\n- Comprehensive logging\n- Error handling and recovery\n        \nThis text would normally come from an actual OCR service like Mistral Pixtral API, Tesseract, or other OCR engines.\n\nPage 2: This is extracted text from page 2.\n        \nThis is a demonstration of the OCR system integrated with PostgreSQL database.\nThe system can process PDF documents, extract text from each page, and store all data in the database.\n        \nKey features:\n- Frontend upload integration\n- Database storage of all content\n- Page-by-page processing\n- Comprehensive logging\n- Error handling and recovery\n        \nThis text would normally come from an actual OCR service like Mistral Pixtral API, Tesseract, or other OCR engines.\n\nPage 3: This is extracted text from page 3.\n        \nThis is a demonstration of the OCR system integrated with PostgreSQL database.\nThe system can process PDF documents, extract text from each page, and store all data in the database.\n        \nKey features:\n- Frontend upload integration\n- Database storage of all content\n- Page-by-page processing\n- Comprehensive logging\n- Error handling and recovery\n        \nThis text would normally come from an actual OCR service like Mistral Pixtral API, Tesseract, or other OCR engines.\n\nPage 4: This is extracted text from page 4.\n        \nThis is a demonstration of the OCR system integrated with PostgreSQL database.\nThe system can process PDF documents, extract text from each page, and store all data in the database.\n        \nKey features:\n- Frontend upload integration\n- Database storage of all content\n- Page-by-page processing\n- Comprehensive logging\n- Error handling and recovery\n        \nThis text would normally come from an actual OCR service like Mistral Pixtral API, Tesseract, or other OCR engines.",
  "output_files": {
    "word_document": "outputs\\82de8eb2-519b-46a9-b933-20af6ef586f7_train_model_pdf_extracted.docx",
    "complete_text": "outputs\\82de8eb2-519b-46a9-b933-20af6ef586f7_train_model_pdf_complete.txt",
    "individual_pages": [
      "outputs\\page_001.txt",
      "outputs\\page_002.txt",
      "outputs\\page_003.txt",
      "outputs\\page_004.txt"
    ]
  },
  "page_results": [
    {
      "page": 1,
      "text": "This is extracted text from page 1.\n        \nThis is a demonstration of the OCR system integrated with PostgreSQL database.\nThe system can process PDF documents, extract text from each page, and store all data in the database.\n        \nKey features:\n- Frontend upload integration\n- Database storage of all content\n- Page-by-page processing\n- Comprehensive logging\n- Error handling and recovery\n        \nThis text would normally come from an actual OCR service like Mistral Pixtral API, Tesseract, or other OCR engines.",
      "status": "success",
      "usage": {
        "total_tokens": 79
      },
      "text_length": 518,
      "page_id": "64463e84-db14-44a3-ba92-45d0a9c21711",
      "content_id": "1634de10-c607-4f70-9076-2b8660f5443f"
    },
    {
      "page": 2,
      "text": "This is extracted text from page 2.\n        \nThis is a demonstration of the OCR system integrated with PostgreSQL database.\nThe system can process PDF documents, extract text from each page, and store all data in the database.\n        \nKey features:\n- Frontend upload integration\n- Database storage of all content\n- Page-by-page processing\n- Comprehensive logging\n- Error handling and recovery\n        \nThis text would normally come from an actual OCR service like Mistral Pixtral API, Tesseract, or other OCR engines.",
      "status": "success",
      "usage": {
        "total_tokens": 79
      },
      "text_length": 518,
      "page_id": "20928447-c8ab-437c-92ed-343969cbbd6b",
      "content_id": "2ea818da-c62d-451a-9586-cc3dbe770714"
    },
    {
      "page": 3,
      "text": "This is extracted text from page 3.\n        \nThis is a demonstration of the OCR system integrated with PostgreSQL database.\nThe system can process PDF documents, extract text from each page, and store all data in the database.\n        \nKey features:\n- Frontend upload integration\n- Database storage of all content\n- Page-by-page processing\n- Comprehensive logging\n- Error handling and recovery\n        \nThis text would normally come from an actual OCR service like Mistral Pixtral API, Tesseract, or other OCR engines.",
      "status": "success",
      "usage": {
        "total_tokens": 79
      },
      "text_length": 518,
      "page_id": "d529931c-dd3c-42e8-b494-40840af93ea0",
      "content_id": "b804711e-dde1-4981-b3e7-1767251efd48"
    },
    {
      "page": 4,
      "text": "This is extracted text from page 4.\n        \nThis is a demonstration of the OCR system integrated with PostgreSQL database.\nThe system can process PDF documents, extract text from each page, and store all data in the database.\n        \nKey features:\n- Frontend upload integration\n- Database storage of all content\n- Page-by-page processing\n- Comprehensive logging\n- Error handling and recovery\n        \nThis text would normally come from an actual OCR service like Mistral Pixtral API, Tesseract, or other OCR engines.",
      "status": "success",
      "usage": {
        "total_tokens": 79
      },
      "text_length": 518,
      "page_id": "e51e311c-600e-48e5-9a6a-8d6cd821eacb",
      "content_id": "a6091fff-c589-4033-91fe-2dcd04fe8841"
    }
  ],
  "processing_time_ms": 61089,
  "status": "completed"
}